chapter 1
about object
c语言中   数据   和对数据的操作   （函数）  程序性的 面向过程
一组 分布在各个以功能为导向的函数中 的算法所驱动 处理的是共同的外部数据

C++中  独立的抽象数据类型 ADT 来实现

软件工程
参数

虚函数 虚基类 虚继承

虚析构函数

1.1 c++ object model   20180607

类数据成员  成员变量有两种  静态非静态
类成员函数  三种    静态 非静态 虚


---- 简单对象模型

c++编译器 设计复杂度  空间 执行期效率
slots
---- 表格驱动对象模型
member function talbe
---- c++对象模型

内存空间和存取时间进行优化
virtual table
vtbl vptr


1 nonstatic constructor function
2 virtual deconstructor function
3 nonstatic membuer function
4 static member function
5 virtual member function
6 nonstatic member variable
7 static member variable


6          25
 
7   4      13

继承   
单一继承
多继承

class iostream: public istream,public ostream{

};
虚拟继承
class istream: virtual public ios{...};
class ostream: virtual public ios{...};

13357158917 钱伟

c++2.0 virtual base class
 chapter 3.4  ？？？
---- 对象模型如何影响程序
a.add(b); <==> add(a,b);

type_info object RTTI


1.2 关键词所带来的差异

1.3 对象的差异

====================
20180708
chap2 构造函数语意学

implicit
explicit
trivial
nontrival
memberwise
bitwise
semantics


conversion运算符
变量测试
expicit  制止的那一参数的构造函数被当做一个conversion运算符

2.1 默认构造函数的构造操作
default constructor    在需要的时候被编译器构造出来


---- 带有default constructor 的member class object


被程序员需要 VS 被编译器需要
Bar::foo 编译器初始化
Bar::str 程序员初始化

被合成的默认构造函数只满足编译器的需要 而不是程序的需要！！

附加 compiler code   VS explicit user code
扩展用户写的构造函数  增加成员object的默认构造函数调用！



2.2 Copy Constructor的构造操作
3种情况 调用拷贝构造函数

extern 
static

显式的定义拷贝构造函数

default construct and copy construct 在必要的时候才由显示器产生出来!!!!

copy constructor VS copy assignment operator!!!!

隐式声明或者隐式定义


---- Bitwise Copy Semantics位逐次拷贝

没有显式定义copy constructor的情况下，编译器是否自动生成一个copy constructor??

在合成的copy constructor中, 整数 指针 nonclass member也都会被复制


---- 重新设定virtual table指针

编译器导入一个vptr到一个class中后，该class就不再展现bitwise semantis 编译器需要合成一个copy constructor
以求将vptr正确的初始化

"bitwise copy semantics"

---- 处理 Virtual Base Class Subobject
虚函数      虚析构函数
虚拟继承    虚基类

编译器产生的代码  A 子类调用父类的默认构造函数 B 初始化vptr C 定位出子类中的父类成员

2.3 程序转化语意学

----  显示的初始化操作

在严谨的C++用词中 定义是指占用内存的行为
x1.X::X(x0)

---- 参数的初始化
X xx=arg

编译器实现技术上，有一种策略是导入所谓的临时性object 并调用copy constructor将它初始化



---- 返回值的初始化
(bar(__temp0),__temp0).memfunc();

---- 在使用者层面做优化
---- 在编译器层面做优化
这个copy constructor的出现激活了C++编译器中的NRV优化
printlocaltime()   C Runtime library

static extern objects拷贝构造操作上

---- Copy Constructor: 要还是不要
explicit copy constructor!

使用C++ library的memcpy()会更有效率

不含任何由编译器产生的内部members  vptr 

vptr必须在使用者的代码执行之前先设定妥当


2.4 成员的初始化队伍

构造函数初始化类成员变量
initialization list 

成员初始化列表  member initialization list

assign 运算符

string的默认构造函数  产生一个临时对象并初始化  赋值运算符 销毁临时对象
一个明显更有效率的实现方法

成员初始化列表   String is different from int.

编译器会一一操作initialization list 以适当的顺序在constructor之内安插初始化操作

在任何explicit user code 之前 

list中的项目是有class member声明顺序决定的













