构造器与垃圾收集器
调用重载版本

从某个构造函数调用重载版的另一个构造函数

重载 继承 都是提高代码复用   不想让相同的代码出现在每个构造函数中

this就是个对对象本身的调用
this() 只能用在构造函数 且必须是第一行语句
this() 与 super() 互斥的


使用this 来从某个构造函数调用同一个类的另外一个构造函数
this() 只能在构造函数中，且必须是第一行语句 
super() 与this() 不能得兼

缺少方法主体或者声明为抽象



B 对象的诞生 对象存在多久呢
对象的生命周期 看引用 变量的声明周期而定

局部变量 实例变量

C++中有全局变量的概念  how about java？

局部变量仅限于当前函数中

局部变量值存活于声明该变量的方法中
实例变量的寿命与对象相同

变量的堆栈块还存在于堆栈上

引用变量：  引用变量只能处在它的范围中才能被引用


变量的声明周期如何影响对象的生命周期   如果对对象的唯一引用死了，对象就会从堆中被踢开 引用变量会跟堆栈块一起解散
对象何时会变成可悲垃圾收集器回收的

GC对象用完了就要被抛弃   当最后一个引用消失时，对象就会变成可回收的。
