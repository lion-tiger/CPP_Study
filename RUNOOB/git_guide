0 git教程
分布式版本控制和源代码管理系统
重点使用和管理代码的速度
管理linux内盒开发
GNU
官网 https://git-scm.com/

如何在分布式环境中使用git进行项目版本控制
基于web和非基于web的应用程序开发中工作
前提条件:
java或者其他软件开发的项目

workspace
index/stage
repository
remote
 


http://www.yiibai.com/git/
=========================================
1 git基础概念
版本控制工具的一些背景知识
如何在系统运行git
设置git
版本控制 一种记录 文件内容变化  可以对任何文件进行版本控制

图形 网页设计师  图片 网页布局   vcs  version control system
比较文件的变化细节  容易恢复
本地版本控制系统 某种简单的数据库
集中化的版本控制系统 有一个单一的集中管理的服务器
RCS  --> SVN --> GIT
CVS SVN Perforce
分布式版本控制系统  使用本地仓库恢复   clone是对代码仓库的完整备份
==========================================
2 git历史
git诞生于一个极富纷争大举创新的年代
linux内盒开源项目
内核维护工作 提交补丁 保存归档
对非线性开发模式的强力支持 允许成千上万个并行开发的分支
超大规模项目
2005~now
============================================
3 git基础和原理
理解git的思想和基本原理
知其所以然 游刃有余


-直接记录快照， 而非差异比较
git对待数据的方法  不是以文件变更表的方式存储信息
初始文件 + 差异
git把数据看做是小型文件系统的一组快照
制作一个快照 并 保存这个快照的索引
git对待数据更像一个快照流
-近乎所有的操作都是在本地执行
git diff 差异计算
VPN?

-git保证完整性git用以计算校验和的机制叫做sha 散列 hash 哈西
40 字符串

文件内容的哈希值来索引 而不是文件名
-git一般只添加数据

定期推送数据库到其他仓库

尽情的各种尝试
更深度探讨git如何保存数据及恢复数据的话题，撤销操作
三种状态
已提交 committed   git 仓库 
已修改 modified    工作目录
已暂存 staged      暂存区域  索引 index

git仓库
====================================================
4 git安装设置
软件包 安装程序安装 或者下载源码编译安装
Fedora yum install git
Debian apt-get install git

源码安装 ??????????
======================================================
5 git 使用前配置
安装了git之后 配置定义git环境
只需配置一次
git config 

/etc/gitconifg    --system
~/.gitconfig      --global
.git/config       
设置邮件名和邮件地址

git config --global user.name "xie"
git config --global user.email ""

git help config
irc.freenode.net
=======================================================
6 git快速入门
各种基本命令
配置并初始化一个仓库
开始或停止跟踪一个文件
暂存
提交  

不同提交间的差异
远程仓库推送
拉取

远程仓库
git的目标是管理一个工程
一些文件的集合
跟踪他们的变化
commit objects + 指针
.git/

 创建git仓库
自己搭建git服务器 VS 使用第三方托管平台

http://git.oschina.net
-获取git仓库
a git clone url

git bash
git支持多种传输协议 http:// 
                 git://
                 ssh
                 
                 git init 
                 git add 
                 git commit
                 
 已跟踪和未跟踪
 
 已跟踪：未修改 已修改 已暂存 已提交
 git status -s 
 git status --short
 git add 
 git commit
 自动生成的文档 存档
 
 
6 远程仓库的使用
git项目上多人合作
好几个远程仓库
推送 拉取数据
管理不同的远程分支

6.1 查看远程仓库
如果已经配置远程仓库服务器 git remote 
origin git给你克隆的仓库服务器的默认名字
git remote
git remote -v
git remote add <shortnaem> <url>

git fetch gs

git pull
git push
git push -u origin master
git push origin master
git remote show
git remote show origin






======================================================
======================================================
chap7 git工作流程
http://www.yiibai.com/git/git_life_cycle.html
git生命周期
每个操作的git命令
======================================================
chap8 git创建存储库
如何创建一个远程git仓库
需要一个远程git仓库来执行团队协作。
软件项目的托管平台 github 创建并初始化一个新的存储库
======================================================
chap9 git克隆操作
演示如何使用git clone命令
git bash
git命令行工具界面
======================================================
chap10 git执行变更操作
添加文件 修改和提交
git基本的文件修改和版本管理
代码通过编译测试 一切正常
git status -s
??
git add  命令将文件添加到暂存区
git commit main.py -m ""

git commit -a -m
=======================================================
chap11 git查看更改
对比提交结果
git log
git show
git status
git diff             opendiff kompare emerge vimdiff
=======================================================
chap12 git提交更改
git存储库的文件和提交文件记录
git commit --amend
=======================================================
chap13 git推送 push 操作
与其他开发人员协同开发工作
每个开发人员都可以提交自己贡献的代码 让其他人看到并修改
协同多人一起工作
将代码文件最后一个确定版本提交 然后推送变更
push 操作将数据永久存储到git仓库
成功的

git show
git push origin master

=========================================================
chap14 git更新操作
git add
git commit
git push
git pull
git fetch
=========================================================
chap15  git隐藏操作
git stash
git stash pop
git stash list
=========================================================
chap16 git移动操作
git mv
git add
git push
git pull
=========================================================
chap17 git重命名操作
git mv a b
git status -s
git commit -a -m "xxx"
git push origin master
========================================================
chap18 git删除操作
git rm
git commit -a -am
git push origin master
========================================================
chap19 git修正错误
撤销对本地存储库所做的修改
恢复未提交的修改
git checkout  命令 还原文件的内容

git checkout 命令 提供一个附加参数 HEAD指针，
附加的提交指针参数指示git checkout命令重置工作树，并删除分段修改

??????
=========================================================
chap20 git标签操作
标签操作允许为存储库中特定版本提供有意义的名称
标记项目代码 以便以后更容易访问这些代码
git tag -a -m
git pushi origin tag Release_1_0

git pull
git tag -l
git show tagname

git tag -d tagname
git push origin :tagname
































chap10 git config 命令
此命令用于获取并设置存储库或者全局选项
这些变量控制git的外观和操作的各个方面

查询 设置 替换 取消 设置选项

1 配置文件的存储位置
/etc/gitconfig --system
~/.gitconfig   --global
.git/config

2 配置用户名和密码
git config --global user.name "xie"
git config --global user.email ""
3 配置编辑器
git config --global core.editor emacs

4 配置比较工具
缺省的比较工具 解决合并时的冲突
vimdiff
git config --global merge.tool vimdiff
kdiff3 tkdiff meld xxdiff emerge vimdiff gvimdiff ecmerge opendiff 作为有效的合并工具
也可是设置一个客户端的工具
5
git config --list
添加 删除配置项
--add

git config --add site.name yibai


/etc/gitconfig
~/.gitconifg
使用最后面的值

tengyuedeMac-mini:yibai_example tengyue$ git config --list
user.name=Xie Guoyong
user.email=735332492@qq.com
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
core.ignorecase=true
core.precomposeunicode=true
remote.origin.url=https://github.com/lion-tiger/yibai_example.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master



6
git help config
git config --help
man git-config



















