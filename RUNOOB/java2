chap4   ==ok
Java基础语法

一个java程序可以认为是一系列对象的集合。而这些对象通过调用彼此的方法来协同工作。

类
对象
方法
实例变量 


对象是类的实例    
int a;
DOG dog;

类是一个模板 描述一类对象的行为和状态
方法就是行为
实例变量是状态

第一个java程序
保存 编译 运行 java程序
假设环境变量都设置好了。

基本语法
大小写敏感
类名 类名首字母大写
方法名
源文件名必须与类名相同
主方法入口  public static void main(String[] args){}  所有的java程序都是从这个方法开始执行

java标识符  类名 变量名 方法名都被称为标识符

java修饰符   修饰符修饰类中方法和属性
访问控制修饰符     defalut public protected private
非访问控制修饰符   final abstract strictfp

java变量   局部变量 类变量（静态变量） 成员变量

java数组  数组是存储在堆上的对象 可以保存多个同类型的变量  
   声明 构造 初始化一个数组
   
java枚举  java5.0引入了枚举  枚举限制变量只能是预先设定好的值 使用枚举可以减少代码中的bug

枚举可以单独声明或者声明在类里面，方法 变量 构造函数也可以在枚举中定义 ？？？



java关键字 就是保留字  不能用于常量 变量 标识符的名称
java注释 单行和多行注释 /**/  //
java编译器
java空行  空白行 

继承  重用已存在的类的方法和属性
接口 接口可以理解为对象间互相通信的协议 接口在继承中扮演很重要的角色
接口只定义派生类要用到的方法，方法的具体实现完全取决于派生类

编译型源程序 C/C++  编译链接成可执行文件 在操作系统上执行
java源程序 编译为字节码程序  

===================================================================================
chap5
java对象和类
java作为一种面向对象的语言。支持一下基本概念
多态
继承
封装
抽象
类
对象
实例
方法
重载

本节重点研究对象和类的概念
对象 类的一个实例 有状态和行为
类是一个模板 描述一类对象的行为和状态

男孩女孩为类  每个人为该类的对象
int a;
Boy boy;
class object
int   a
-- java中的对象
对比现实对象和软件对象
软件对象也有状态和行为 软件对象的状态就是属性 行为通过方法体现
在软件开发中，方法操作对象内部状态的改变 对象的相互调用也是通过方法来完成

java中的类
类可以看做是创建对象的模板

一个类 可以包含 局部变量 成员变量 类变量
一个类可以拥有多个方法 

--构造方法
每个类都有构造方法。java编译器将为该类提供一个默认构造方法

--创建对象
对象是根据类创建的
在java中 使用关键字new来创建一个新的对象
创建对象需要三步  声明 实例化 初始化
Dog d = new Dog('go')

--访问实例变量和方法
通过创建的对象来访问成员变量和成员方法
实例化对象
ObjectReference = new Constructor()
ObjectReference.variableName
ObjectReference.MethodName()

--实例展示如何访问实例变量和调用成员方法

--源文件声明规则

在一个源文件中定义多个类 import语句 package语句时

    一个源文件只能有一个public类，可以有多个非public类
    源文件名和public类名一致
    
    如果类定义在包中，package语句应该在源文件首行
    源文件包含import语句  
    
    package 
    import
    class definition
    import 和package语句对源文件中定义的所有的类有效。在同一源文件中，不能给不同的类不同的包声明
    
    类有若干种访问级别 类分不同的类型 抽象类final类 访问控制章节
    内部类 匿名类
    
java包
包主要用来对类和接口进行分类。
开发java程序时，成百上千的类， 有必要对类和接口进行分类

import语句
完整的限定名  包名 类名  编译器定位到源代码或者类
import语句就用来提供一个合理的路径 使得编译器可以找到某个类


import java.io.*;
io路径下的所有类


    






