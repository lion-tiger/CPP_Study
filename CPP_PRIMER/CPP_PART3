Part 3
类和数据抽象

C++程序中 类是重要的  核心
类 定义解决问题 定制的数据类型 易于编写和理解应用程序
设计良好的类可以像内置类型一样容易使用

类定义了数据成员和函数成员  数据成员存储 状态
                        函数成员负责执行操作
                        
通过类 我们可以将实现与接口分离
用接口指定类所支持的操作，实现的细节 类实现者

类类型 抽象数据类型 抽象数据类型 将 数据状态和作用于状态的操作视为一个单元
抽象的考虑类该做什么，而武学知道如何去完成这些操作。
抽象数据类型 是面向对象编程和泛型编程的基础
chap12
定义类 类作用域 数据隐藏和构造函数 友元 this指针 静态 可变成员
chap13 
类能够控制初始化 复制 赋值和销毁
chap14 
操作符重载
类类型的操作数和内置操作符一起使用 操作符重载   类类型==内置类型
转换函数
=======================================================
chap12
C++中 类定义自己的抽象数据类型ADT  编写调试修改程序
进一步讨论类，数据抽象的重要性

数据抽象能够隐藏对象的内部表示 同事允许执行对象的共有操作。
类的作用域 构造函数 this指针
友元 可变成员 静态成员
======================================================
chap12
类 
类机制的作用 语言的演变 创建类的配套支持 
语言设计的 主要目标  允许程序员定义自己的类型 用起来和内置类型一样容易和直观
-
类的声明和定义
已经用过的标准库类型 vector istream string

类定义
最简单来说 类就是定义了一种新的数据类型和一个新的作用域

类成员可以是数据 函数 或者类型别名
访问标号 public private protected
所有成员在类的内部声明 可以外部定义。
一旦类定义完成后，就没有任何方式可以增加新成员了。
构造函数
g++ -c XX.cpp 
创建一个类类型的对象时 编译器自动使用一个构造函数初始化该对象

2.8
7.7
2.3.3

构造函数是一个与类同名的成员函数，用于给每个数据成员设置适当的初始值
构造函数一般使用一个构造函数初始化列表 来初始化对象的数据成员
    Sales_item():units_sold(0),revenue(0.0){}
    
在类内部，声明成员函数是必须的 定义成员函数是可选的  类内部定义的函数默认为inline
7.6

在类外部定义的成员函数必须知名类的作用域  作用域操作符
成员函数有一个附加的隐含实参 将函数绑定到调用函数的对象   ？？

    double avg_price() const;
    const成员不能改变其所操作对象的数据成员  const必须同时出现在声明和定义中
--
数据抽象和封装
    类 背后所蕴含的基本思想是数据抽象和封装
    数据抽象 接口和实现 分离的编程技术 设计技术
    类设计者和实现者   VS  类的使用者
    
    封装是将低层次的元素组合起来形成新的高层次实体的技术  函数是封装的一种形式
                                                 类也是一种封装的实体
    
    函数所执行的细节行为被封装在函数本身这个更大的实体中
    
标准库类型vector同时具备数据抽象和数据封装的特性
         数组既不是抽象的也不是封装的
         
C++类中，使用访问标号来定义抽象接口和实施封装
  private封装了类型的实现细节
  public成员定义了 类型的数据抽象
  
  pair
  具体类会暴露而非隐藏实现细节
  
  pair vector map




















1 go程序设计语言


2 深度探索c++对象模型
3 深入理解java虚拟机 jvm高级特性最佳实践
4 STL源码剖析
5 java核心技术系列 java多线程核心技术











































201711031
平安  2k  支付宝
浦发
中信
花旗
兴业
招商
白条
金条
利息
借呗
花呗
微粒贷
网商贷

借呗 借10080 to  6613  20171031


