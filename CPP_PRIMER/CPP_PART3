Part 3
类和数据抽象

C++程序中 类是重要的  核心
类 定义解决问题 定制的数据类型 易于编写和理解应用程序
设计良好的类可以像内置类型一样容易使用

类定义了数据成员和函数成员  数据成员存储 状态
                        函数成员负责执行操作
                        
通过类 我们可以将实现与接口分离
用接口指定类所支持的操作，实现的细节 类实现者

类类型 抽象数据类型 抽象数据类型 将 数据状态和作用于状态的操作视为一个单元
抽象的考虑类该做什么，而武学知道如何去完成这些操作。
抽象数据类型 是面向对象编程和泛型编程的基础
chap12
定义类 类作用域 数据隐藏和构造函数 友元 this指针 静态 可变成员
chap13 
类能够控制初始化 复制 赋值和销毁
chap14 
操作符重载
类类型的操作数和内置操作符一起使用 操作符重载   类类型==内置类型
转换函数
=======================================================
chap12
C++中 类定义自己的抽象数据类型ADT  编写调试修改程序
进一步讨论类，数据抽象的重要性

数据抽象能够隐藏对象的内部表示 同事允许执行对象的共有操作。
类的作用域 构造函数 this指针
友元 可变成员 静态成员
======================================================
chap12
类 
类机制的作用 语言的演变 创建类的配套支持 
语言设计的 主要目标  允许程序员定义自己的类型 用起来和内置类型一样容易和直观
-
类的声明和定义
已经用过的标准库类型 vector istream string

类定义
最简单来说 类就是定义了一种新的数据类型和一个新的作用域

类成员可以是数据 函数 或者类型别名
访问标号 public private protected
所有成员在类的内部声明 可以外部定义。
一旦类定义完成后，就没有任何方式可以增加新成员了。
构造函数
g++ -c XX.cpp 
创建一个类类型的对象时 编译器自动使用一个构造函数初始化该对象

2.8
7.7
2.3.3

构造函数是一个与类同名的成员函数，用于给每个数据成员设置适当的初始值
构造函数一般使用一个构造函数初始化列表 来初始化对象的数据成员
    Sales_item():units_sold(0),revenue(0.0){}
    
在类内部，声明成员函数是必须的 定义成员函数是可选的  类内部定义的函数默认为inline
7.6

在类外部定义的成员函数必须知名类的作用域  作用域操作符
成员函数有一个附加的隐含实参 将函数绑定到调用函数的对象   ？？

    double avg_price() const;
    const成员不能改变其所操作对象的数据成员  const必须同时出现在声明和定义中
--
数据抽象和封装
    类 背后所蕴含的基本思想是数据抽象和封装
    数据抽象 接口和实现 分离的编程技术 设计技术
    类设计者和实现者   VS  类的使用者
    
    封装是将低层次的元素组合起来形成新的高层次实体的技术  函数是封装的一种形式
                                                 类也是一种封装的实体
    
    函数所执行的细节行为被封装在函数本身这个更大的实体中
    
标准库类型vector同时具备数据抽象和数据封装的特性
         数组既不是抽象的也不是封装的
         
C++类中，使用访问标号来定义抽象接口和实施封装
  private封装了类型的实现细节
  public成员定义了 类型的数据抽象
  
  pair
  具体类会暴露而非隐藏实现细节
  
  pair vector map
  
  定义构造函数初始化成员
  
  用户  运行应用程序的人 
  类的设计者为类的用户 设计并实现类
  良好设计 实用的类 设计也要贴合类用户的需求
  类的设计者和实现者
   
  类的使用者只关心类的接口 好的类的设计者会定义直观易用的类接口
  
  数据抽象和封装的好处
  
  类的更多的基础知识
  
  -同一个类型的多个数据成员
      成员声明和普通变量声明
  -使用类型别名简化类
  
     类可以定义自己的局部类型名字
     标准访问控制
     type std::string::size_type index;
  -成员函数可以被重载
      类似于非成员函数 成员函数也可以被重载
  -定义重载成员函数
  
  -显示的指定inline成员函数
4
  类声明与类定义
 一个给定的源文件中，一个类只能被定义一次
 类定义放在头文件中
 可以声明一个类而不定义它
 前向声明 不能定义该类型的对象，可以定义指向该类型的指针 引用。声明形参类型和返回类型
 
 为类的成员使用类声明
 创建类的对象之前，必须完整的定义类
 类不能具有自身类型的成员 类的数据成员可以是指向自身的引用或者指针
 
 5
 类对象
 定义一个类 就是定义了一个类型。 可以定义该类型的对象
 int i
 class A a
 定义对象时，分配内存空间
 定义类型时 不分配内存空间
 每个对象都有自身类型的数据成员副本
 为什么类的定义以分号结束，因为其后可以跟一个对象定义列表
==============================================
12.2 隐含的this指针
7.7.1
成员函数具有一个附件的隐含形参 指向该类对象的一个指针
this 指向调用成员函数的的对象


每个函数都返回调用自己的那个对象 使用this指针来访问该对象  return *this
const 指针   能改变指针指向的对象，不能改变指针所保存的地址

在const成员函数中，返回的是 指向const对象的const指针，不能改变其值

const成员函数*this 返回const引用

Screen& display()
const Screen& display()const{}

基于成员函数是否为const 重载它。
基于指针形参是否指向const 重载一个函数


const对象只能使用const成员
非const对象可以使用任一成员 


函数封装重复操作

可变数据成员mutable


============================================
12.3类作用域
每个类都定义了自己的新作用域和唯一的类型
在类的定义体内声明类成员 将成员名引入类的作用域
两个不同的类具有不同的作用域

使用类的成员：
    类的作用域外，成员只能通过对象或指针访问 成员变量
    成员访问操作符 . ->
    作用域操作符 ::
    
    一般的数据或成员必须通过对象来访问，
    定义类型的成员 使用作用域操作符来访问
作用域与成员定义
    成员是在类的定义体外定义的  必须指明成员出现在哪个类中
    完全限定名  Sales_item::avgprice  该定义是在类作用域中
形参表和函数体处于类作用域中
函数返回类型不一定在类作用域中


类作用域中的名字查找
    C++程序中，所有的名字必须在使用之前声明
    
    
    先定义类型名字，  才能用作数据成员的类型 成员函数的返回类型或者形参类型
    名字必须在使用之前定义 
    一旦一个名字被用作类型名，该名字就不能被重复定义
        块作用域名字查找
        
    编译器首先在该函数的局部作用域中查找。 局部作用域声明了一个函数形参  height形参屏蔽了 height数据成员
    this->height
    Screen::height
    
    函数作用域 类作用域 外围作用域
        全局作用域确定操作符 ::height
    
====================================
12.4 构造函数
构造函数是特殊的成员函数
创建类类型的新对象的时候 执行构造函数

构造函数初始化成员变量
    构造函数使用构造函数初始化列表初始化成员变量  string的默认构造函数隐式的初始化为null
    
    构造函数与类名相同 不能指定返回类型



















1 go程序设计语言


2 深度探索c++对象模型
3 深入理解java虚拟机 jvm高级特性最佳实践
4 STL源码剖析
5 java核心技术系列 java多线程核心技术











































201711031
平安  2k  支付宝
浦发  1500
中信  2100
花旗  1799
兴业  1412
招商
白条
金条
利息
借呗         -2k+
花呗
微粒贷       -5691.83   20171101
网商贷

借呗 借10080 to  6613  20171031


