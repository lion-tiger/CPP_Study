数字和静态   数字很重要

primitive主数据类型
某种特定的格式来打印日期
字符串转换成数字

Java API 有很多与数字有关的方法

很多方法是静态的   静态的变量和方法   静态final变量这种java常数


在java中 没有东西是全局的

Math方法 最接近全局的方法
一种方法 不依赖实例变量的值  方法会对参数执行操作，操作不受实例变量状态的影响 唯一能够改变round()行为的只有所传入的参数

在堆上建立math对象 浪费资源 不需要创建math的实例，无法创建

math所有方法都不需要实例变量，方法都是静态的，无需math实例，你用的是math类本身
这些方法无需实例变量，不需要特定对象来判别行为

math的构造函数被标记为私有的 不能创建math对象
抽象类也是不能创建对象



-- 非静态方法和静态方法的区别
java是面向对象的 特殊的情况下  使用方法，而不需要类的实例

static这个关键字可以标记出不需要实例的方法   一个静态的方法， 一种不依靠实例变量也就不需要对象的行为

实例变量的值会影响play方法的行为

没有实例变量
直接使用类的名字 没有对象 绝对没有对象  以类的名称调用静态方法

Math.min(32,43);
以引用变量的名称调用非静态方法

私有构造函数




带有静态方法的类 通常不打算初始化
abstract 标记一个类 不让其创建实例  抽象的类是不能被初始化的！！

也可以用私有构造函数来限制非抽象类被初始化
标记为private的方法只能被同一类程序所调用

math通过私有构造函数来防止其被初始化  无法创建math实例，编译器知道不能存取这些私有的构造函数

这不标明 有 静态方法的类不能 被初始化

main方法 启动或者测试其他的类 从main中创建类的实例并调用实例上 的方法

可以任意地在类中组合 静态的和非静态的方法 任何非静态的方法代表必须以某种实例来操作

取得新对象的方法   new 序列化  java Reflection API

========================
静态方法不能调用非静态变量
静态方法是无关 特定类的实例 情况下执行的，
静态方法不知道堆上是哪个实例   无法从静态上下文中引用非静态变量



